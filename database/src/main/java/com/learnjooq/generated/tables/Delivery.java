/*
 * This file is generated by jOOQ.
 */
package com.learnjooq.generated.tables;


import com.learnjooq.generated.Indexes;
import com.learnjooq.generated.Keys;
import com.learnjooq.generated.Public;
import com.learnjooq.generated.tables.records.DeliveryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Delivery extends TableImpl<DeliveryRecord> {

    private static final long serialVersionUID = 1195952620;

    /**
     * The reference instance of <code>public.delivery</code>
     */
    public static final Delivery DELIVERY = new Delivery();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeliveryRecord> getRecordType() {
        return DeliveryRecord.class;
    }

    /**
     * The column <code>public.delivery.id</code>.
     */
    public final TableField<DeliveryRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('public.delivery_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.delivery.update_ts</code>.
     */
    public final TableField<DeliveryRecord, OffsetDateTime> UPDATE_TS = createField("update_ts", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.delivery.crte_user</code>.
     */
    public final TableField<DeliveryRecord, String> CRTE_USER = createField("crte_user", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.delivery.crte_ts</code>.
     */
    public final TableField<DeliveryRecord, OffsetDateTime> CRTE_TS = createField("crte_ts", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.delivery.update_user</code>.
     */
    public final TableField<DeliveryRecord, String> UPDATE_USER = createField("update_user", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.delivery</code> table reference
     */
    public Delivery() {
        this(DSL.name("delivery"), null);
    }

    /**
     * Create an aliased <code>public.delivery</code> table reference
     */
    public Delivery(String alias) {
        this(DSL.name(alias), DELIVERY);
    }

    /**
     * Create an aliased <code>public.delivery</code> table reference
     */
    public Delivery(Name alias) {
        this(alias, DELIVERY);
    }

    private Delivery(Name alias, Table<DeliveryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Delivery(Name alias, Table<DeliveryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Delivery(Table<O> child, ForeignKey<O, DeliveryRecord> key) {
        super(child, key, DELIVERY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DELIVERY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DeliveryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DELIVERY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DeliveryRecord> getPrimaryKey() {
        return Keys.DELIVERY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DeliveryRecord>> getKeys() {
        return Arrays.<UniqueKey<DeliveryRecord>>asList(Keys.DELIVERY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Delivery as(String alias) {
        return new Delivery(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Delivery as(Name alias) {
        return new Delivery(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Delivery rename(String name) {
        return new Delivery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Delivery rename(Name name) {
        return new Delivery(name, null);
    }
}
